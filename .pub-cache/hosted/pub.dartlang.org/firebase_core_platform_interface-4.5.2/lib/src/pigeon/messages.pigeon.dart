// Copyright 2022, the Chromium project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// Autogenerated from Pigeon (v3.2.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name
// @dart = 2.12
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/foundation.dart' show WriteBuffer, ReadBuffer;
import 'package:flutter/services.dart';

class PigeonFirebaseOptions {
  PigeonFirebaseOptions({
    required this.apiKey,
    required this.appId,
    required this.messagingSenderId,
    required this.projectId,
    this.authDomain,
    this.databaseURL,
    this.storageBucket,
    this.measurementId,
    this.trackingId,
    this.deepLinkURLScheme,
    this.androidClientId,
    this.iosClientId,
    this.iosBundleId,
    this.appGroupId,
  });

  String apiKey;
  String appId;
  String messagingSenderId;
  String projectId;
  String? authDomain;
  String? databaseURL;
  String? storageBucket;
  String? measurementId;
  String? trackingId;
  String? deepLinkURLScheme;
  String? androidClientId;
  String? iosClientId;
  String? iosBundleId;
  String? appGroupId;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['apiKey'] = apiKey;
    pigeonMap['appId'] = appId;
    pigeonMap['messagingSenderId'] = messagingSenderId;
    pigeonMap['projectId'] = projectId;
    pigeonMap['authDomain'] = authDomain;
    pigeonMap['databaseURL'] = databaseURL;
    pigeonMap['storageBucket'] = storageBucket;
    pigeonMap['measurementId'] = measurementId;
    pigeonMap['trackingId'] = trackingId;
    pigeonMap['deepLinkURLScheme'] = deepLinkURLScheme;
    pigeonMap['androidClientId'] = androidClientId;
    pigeonMap['iosClientId'] = iosClientId;
    pigeonMap['iosBundleId'] = iosBundleId;
    pigeonMap['appGroupId'] = appGroupId;
    return pigeonMap;
  }

  static PigeonFirebaseOptions decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return PigeonFirebaseOptions(
      apiKey: pigeonMap['apiKey']! as String,
      appId: pigeonMap['appId']! as String,
      messagingSenderId: pigeonMap['messagingSenderId']! as String,
      projectId: pigeonMap['projectId']! as String,
      authDomain: pigeonMap['authDomain'] as String?,
      databaseURL: pigeonMap['databaseURL'] as String?,
      storageBucket: pigeonMap['storageBucket'] as String?,
      measurementId: pigeonMap['measurementId'] as String?,
      trackingId: pigeonMap['trackingId'] as String?,
      deepLinkURLScheme: pigeonMap['deepLinkURLScheme'] as String?,
      androidClientId: pigeonMap['androidClientId'] as String?,
      iosClientId: pigeonMap['iosClientId'] as String?,
      iosBundleId: pigeonMap['iosBundleId'] as String?,
      appGroupId: pigeonMap['appGroupId'] as String?,
    );
  }
}

class PigeonInitializeResponse {
  PigeonInitializeResponse({
    required this.name,
    required this.options,
    this.isAutomaticDataCollectionEnabled,
    required this.pluginConstants,
  });

  String name;
  PigeonFirebaseOptions options;
  bool? isAutomaticDataCollectionEnabled;
  Map<String?, Object?> pluginConstants;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['name'] = name;
    pigeonMap['options'] = options.encode();
    pigeonMap['isAutomaticDataCollectionEnabled'] =
        isAutomaticDataCollectionEnabled;
    pigeonMap['pluginConstants'] = pluginConstants;
    return pigeonMap;
  }

  static PigeonInitializeResponse decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return PigeonInitializeResponse(
      name: pigeonMap['name']! as String,
      options: PigeonFirebaseOptions.decode(pigeonMap['options']!),
      isAutomaticDataCollectionEnabled:
          pigeonMap['isAutomaticDataCollectionEnabled'] as bool?,
      pluginConstants: (pigeonMap['pluginConstants'] as Map<Object?, Object?>?)!
          .cast<String?, Object?>(),
    );
  }
}

class _FirebaseCoreHostApiCodec extends StandardMessageCodec {
  const _FirebaseCoreHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is PigeonFirebaseOptions) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is PigeonInitializeResponse) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return PigeonFirebaseOptions.decode(readValue(buffer)!);

      case 129:
        return PigeonInitializeResponse.decode(readValue(buffer)!);

      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class FirebaseCoreHostApi {
  /// Constructor for [FirebaseCoreHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  FirebaseCoreHostApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _FirebaseCoreHostApiCodec();

  Future<PigeonInitializeResponse> initializeApp(String arg_appName,
      PigeonFirebaseOptions arg_initializeAppRequest) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.FirebaseCoreHostApi.initializeApp', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_appName, arg_initializeAppRequest])
            as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as PigeonInitializeResponse?)!;
    }
  }

  Future<List<PigeonInitializeResponse?>> initializeCore() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.FirebaseCoreHostApi.initializeCore', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as List<Object?>?)!
          .cast<PigeonInitializeResponse?>();
    }
  }

  Future<PigeonFirebaseOptions> optionsFromResource() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.FirebaseCoreHostApi.optionsFromResource', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as PigeonFirebaseOptions?)!;
    }
  }
}

class _FirebaseAppHostApiCodec extends StandardMessageCodec {
  const _FirebaseAppHostApiCodec();
}

class FirebaseAppHostApi {
  /// Constructor for [FirebaseAppHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  FirebaseAppHostApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _FirebaseAppHostApiCodec();

  Future<void> setAutomaticDataCollectionEnabled(
      String arg_appName, bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.FirebaseAppHostApi.setAutomaticDataCollectionEnabled',
        codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap = await channel
        .send(<Object?>[arg_appName, arg_enabled]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> setAutomaticResourceManagementEnabled(
      String arg_appName, bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.FirebaseAppHostApi.setAutomaticResourceManagementEnabled',
        codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap = await channel
        .send(<Object?>[arg_appName, arg_enabled]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> delete(String arg_appName) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.FirebaseAppHostApi.delete', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_appName]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }
}
